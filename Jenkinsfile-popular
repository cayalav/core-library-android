@Library('bpd-pipeline-library')_
import org.bpd.AndroidHelper
def androidUtils = new AndroidHelper(this)
//def ARTIFACTS_BUILD = " assembleDev"
ARTIFACT_URL_LISTS  = []
ARTIFACT_TO_APPCENTER_LIST  = []

pipeline {
    
    agent { label 'BuildServer' };
    

    environment{
        VERSION = getVersion()
        ARTIFACTS_TO_UPLOAD=""
        ARTIFACT_FOLDER=BRANCH_NAME.replace('/','-')
        ARTIFACT_NAME = "${ARTIFACT_FOLDER}-core-library-android"
        NEXUS_HOST = "http://10.96.46.115:8081/repository"
      	//SONAR_URL = "http://10.15.20.14/"
        //SONAR_PROJECT = "core-library-android"
        OS="android"
        APP_NAME = "core-library"
        KEYSTORE_NAME = "core-library-android"
        APP_DIR = "CoreLibrary"
    }

    stages{
        stage('Prepare'){
            steps{
              script {

                  ARTIFACTS_TO_UPLOAD = getArtifactsToUpload()
                  echo "${ARTIFACTS_TO_UPLOAD}"



                  // Enable nexus repos in build.gradle
                  androidUtils.replaceTextInFile( textToReplace: "useNexusRepo = false", newText: "useNexusRepo = true", targetFile: "build.gradle")
                  androidUtils.replaceTextInFile( textToReplace: "useNexusRepo = false", newText: "useNexusRepo = true", targetFile: "settings.gradle")
                  // Set Nexus as Active Gradle Wrapper Download Path
                  androidUtils.replaceTextInFile( textToReplace: "#distributionUrl=http", newText: "distributionUrl=http", targetFile: "gradle/wrapper/gradle-wrapper.properties") 
                  // Disable external gradle wrapper download path
                  androidUtils.replaceTextInFile( textToReplace: "distributionUrl=https", newText: "#distributionUrl=https", targetFile: "gradle/wrapper/gradle-wrapper.properties")  

              }
			
            }
        }
        stage('Build'){
          environment {
            gradleArgs = "${ARTIFACTS_BUILD} --parallel -x lintVitalRelease"
          }
            steps{
              script {
                sh "chmod +x ./gradlew"
                sh "./gradlew clean  ${env.gradleArgs}"
                //androidUtils.build(JDKversion: "11+28", gradleArgs: "${ARTIFACTS_BUILD} --parallel -x lintVitalRelease  " )
                //androidUtils.signAPK(apksToSign: "**/**/*.apk",keyAlias: "", keyStoreId : "" )
                step([$class: 'SignApksBuilder', apksToSign:  "**/**/*.apk", archiveSignedApks: false, skipZipalign: true, keyAlias: "${KEYSTORE_NAME}", keyStoreId: "${KEYSTORE_NAME}"])
                //step([$class: 'SignApksBuilder', apksToSign:  "**/**/*.apk", archiveSignedApks: false, skipZipalign: true, keyAlias: 'bpd-app-ampresarial', keyStoreId: 'debug.keystore'])               
              }                
            }
        }
		
        stage('Package'){
           when {
                branch pattern: "${BRANCH_NAME}|(release[\\S]+)", comparator: "REGEXP"
            }
		    steps {
		        echo "${VERSION}"
		        echo "${ARTIFACTS_TO_UPLOAD}"

		         nexusArtifactUploader(
                        artifacts: ARTIFACTS_TO_UPLOAD , 
                    credentialsId: 'nexus-credentials', 
                    groupId: "android.${ARTIFACT_FOLDER}.${VERSION}", 
                    nexusUrl: '10.96.46.115:8081', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: "${APP_NAME}", 
                    version: "${VERSION}")
                
                //Delete intermediates folder
                sh "rm -rf ./app/build/intermediates"
                sh "rm -rf ./build/intermediates"
		    }
		}

    }

    
}

def getVersion(){
    script{
        def version = sh label: 'Get version from tag', returnStdout: true, script: 'git tag --contains'
        if (version){
            return version.trim()
        }
        return "${BUILD_NUMBER}"
    }
}

// def addArtifactUrlToList(artifact, button_name){
//     script{
//         def nexus_url = "http://10.96.46.115:8081/repository/core-library/android/${ARTIFACT_FOLDER}/${VERSION}/${artifact}/${VERSION}/${artifact}-${VERSION}.apk"
//         def html_button = """ <td align="center" style="padding:10px;Margin:0;"><a href="${nexus_url}" target="_blank" >APK ${button_name}</a></td>"""
//         ARTIFACT_URL_LISTS.add(html_button)
//     }
// }